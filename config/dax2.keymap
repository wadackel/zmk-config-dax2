#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    quick-tap-ms = <0>;
    tapping-term-ms = <160>;
    flavor = "balanced";
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <160>;
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        to_bluetooth {
            bindings = <&mo 6>;
            key-positions = <0 29>;
            layers = <0>;
        };
    };

    macros {
        esc_lang2: esc_lang2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESCAPE &kp LANG2>;

            label = "ESC_LANG2";
        };
    };

    behaviors {
        esc_lang2_with_layer: esc_lang2_with_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "ESC_LANG2_WITH_LAYER";
            bindings = <&mo>, <&esc_lang2>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB         &kp Q  &kp W         &kp E               &kp R                 &kp T                      &kp Y        &kp U        &kp I        &kp O    &kp P            &kp MINUS
&kp LCTRL       &kp A  &kp S         &kp D               &kp F                 &kp G                      &kp H        &kp J        &kp K        &kp L    &lt 4 SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp Z  &kp X         &kp C               &kp V                 &kp B                      &kp N        &kp M        &lt 5 COMMA  &kp DOT  &kp SLASH        &mo 5
                &mo 5  &kp LEFT_ALT  &mt LEFT_GUI LANG2  &mt LEFT_SHIFT SPACE  &esc_lang2_with_layer 3 0  &lt 2 ENTER  &lt 1 LANG1
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol {
            bindings = <
&trans  &kp TILDE        &kp GRAVE      &kp DOLLAR        &kp PERCENT  &kp CARET      &trans    &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSPACE  &trans
&trans  &kp EXCLAMATION  &kp AT         &kp HASH          &kp EQUAL    &kp PLUS       &kp STAR  &kp UNDER      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp COLON      &kp DOUBLE_QUOTES
&trans  &kp QUESTION     &kp LESS_THAN  &kp GREATER_THAN  &kp PIPE     &kp BACKSLASH  &trans    &trans         &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans         &trans
        &trans           &trans         &trans            &trans       &trans         &trans    &trans
            >;
        };

        Num {
            bindings = <
&trans  &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &trans  &trans  &trans  &trans  &trans     &trans
&trans  &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &trans  &trans  &trans  &trans  &kp COLON  &trans
&trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans        &trans  &trans  &trans  &trans  &trans     &trans
        &trans           &trans           &trans           &trans           &kp KP_DOT    &trans  &trans
            >;
        };

        Function {
            bindings = <
&kp LG(LS(NUMBER_7))  &kp LG(LS(NUMBER_4))      &kp F7  &kp F8  &kp F9  &kp LG(SPACE)      &kp C_MUTE  &kp C_PLAY_PAUSE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &trans
&trans                &kp LG(LC(LS(NUMBER_4)))  &kp F4  &kp F5  &kp F6  &kp LC(LG(SPACE))  &kp LEFT    &kp DOWN            &kp UP_ARROW       &kp RIGHT        &trans  &trans
&trans                &kp F10                   &kp F1  &kp F2  &kp F3  &trans             &trans      &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)   &trans           &trans  &trans
                      &trans                    &trans  &trans  &trans  &trans             &trans      &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp F11                   &kp LG(R)                  &kp LG(DOWN)  &kp LG(UP_ARROW)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(UP_ARROW)          &mkp MB1                   &mkp MB3      &mkp MB2          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(DOWN)              &mkp MB4                   &mkp MB5      &kp LG(W)         &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans                      &kp LA(LC(LG(K)))         &kp LA(LC(LG(M)))     &kp LC(LA(LG(C)))      &trans       &trans           &trans  &trans  &trans  &trans
&trans  &trans  &kp LA(LC(LG(LEFT_ARROW)))  &kp LA(LC(LG(UP_ARROW)))  &kp LA(LC(LG(DOWN)))  &kp LA(LC(LG(RIGHT)))  &trans       &trans           &trans  &trans  &trans  &trans
&trans  &trans  &kp LA(LC(LG(N1)))          &kp LA(LC(LG(N2)))        &kp LA(LC(LG(N3)))    &kp LA(LC(LG(N4)))     &trans       &trans           &trans  &trans  &trans  &trans
        &trans  &trans                      &trans                    &trans                &trans                 &kp LC(TAB)  &kp LS(LC(TAB))
            >;
        };

        Device {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &bt BT_CLR    &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans        &trans
        &trans  &trans  &trans  &trans  &trans  &bt BT_PRV    &bt BT_NXT
            >;
        };
    };
};
